// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	
	static int base;
	static int keyboard;
	static Array screen;
	static boolean color;
	static Array bits;
	
    /** Initializes the Screen */
    function void init() {
		var int i , cur;
		
		let base = 16384;
		let screen = 16384;
		let keyboard = 24576;
		let color = true;
		let i = 0;
		let cur = 1;
		
		while (i < 16){				//  power of 2 bits array
			let bits[i] = cur;
			let cur = cur + cur ;
			let i = i + 1 ;
		}
		
		return;
    }

    /** Erases the entire screen. */
	
    function void clearScreen() {
		var int i;
		
		let  i = base;
		
		while (i < keyboard) {
			
			let screen[i] = false ;
			
			let i = i + 1 ;
			
		}
		
		return;
    }

	
	
    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
	 
    function void setColor(boolean b) {
		let color = b ;
		return;
    }

	
	
    /** Draws the (x,y) pixel, using the current color. */
	
    function void drawPixel(int x, int y) {						// x = col , y = row
		var int current , address , i , pixel , mod;
		
		let i = 0 ;
		let address = y ;
		
		
		if((x < 0) | (x > 511) | (y < 0) | (y > 255))
        {
            do Sys.error(7);
        }
				
		while ( i < 5) {													// row * 32
			let address = address + address ;
		}
		
		let address = base + address + Math.divide(x , 16) ;							//  16384 + 32*r + c/16
		
		let mod =  x & 15 ;																			// x % 16  - bit from left to right		
		
		let current = Memory.peek(address);
		
		if (color ){																				// color = black
			let current = (current | bits[mod] ) ;
			
		}
			
		else {																								// color = white - negate the mod from 0..1..0 to   1..0...1 and do AND
			let mod = ~mod ;										
			let current =  (current & bits[mod] ) ;
		}
		
		do Memory.poke(address, current);
		
		return;
    }

	
	function void drawHorizontalLine (int x1, int y1 , int x2 , int y2){
		var int a , b ;
		
		let a = Math.max (y1, y2);
				
		let b = Math.min (y1, y2);
		
		while ( ~( b > a) ){											// draw horizontal line
		
			do Screen.drawPixel(x1 , b);
			
			let b = b + 1 ;
		}
		
		return;
	}
	
	
	
	function void drawVerticalLine(int x1, int y1 , int x2 , int y2){
		var int a , b ;
		
		let a = Math.max (x1, x2);
		
		let b = Math.min (x1, x2);
		
		while ( ~( b > a) ){											// draw vertical line
		
			do Screen.drawPixel(b , y1);
			
			let b = b + 1 ;
		}
		
		return ;
	}	
	
	
	function void drawDiagonalLine(int x1, int y1 , int x2 , int y2,int dx , int dy){		
	
		var int adyMinusbdx; 
        var int a, b, dx, dy;
		
		let a = 0 ;
		let b = 0 ;
		let adyMinusbdx = 0 ;
       
        while( (~( dx < a))  & (~( dy < b)))							// draw diagonal line
        {
            do Screen.drawPixel(x1 + a, y1 + b);
            if(adyMinusbdx < 0)
            {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            }
            else
            {
                let b = b + 1;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
	}
	
	
	
	
    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
	
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int a , b , dx , dy , adyMinusbdx;
		var boolean  horizontal , vertical;
		
		let a = 0 ;
		let b = 0 ;
		let dx = x2 - x1 ;
		let dy = y2 - y1;
		let adyMinusbdx = 0 ;
		
		if(dx = 0){
			
			if(dy = 0){															// dx = dy = 0  -> x1 = x2 ,  y1= y2
			
				do Screen.drawPixel(x1 , y1);
			}
			
			else{																	// dx = 0 and dy != 0
				
					do Screen.drawHorizontalLine(x1, y1 ,x2 , y2);
			}
		}
		
		else{																		// dx != 0 	
		
			if(dy = 0){															// dx != 0 and dy = 0
				
				do Screen.drawVerticalLine(x1, y1 ,x2 , y2);
			}
			
			else{																	// draw a non straight line 
				
				do Screen.drawDiagonalLine(x1, y1 ,x2 , y2,dx,dy);
			}
		}
		
		return;
    }

	
	
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
	 
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int y;
		
		let y = y1;
		
		while(y < y2){
		
			do Screen.drawHorizontalLine(x1, y,  x2,  y);
			
			let y = y + 1;
		}
		
		return;
    }

	
	
    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int powR , dy , powDy, x1,x2,y1, i;
		
		let powR = Math.multiply(r,r);
		
		let dy = r ;
		let i = -r -1;
		
		while(i < r){
		
			let y1 = y + dy;
			let powDy = dy * dy;
			let powDy = Math.sqrt(powR - powDy);
			let x1 = x - powDy ;
			let x2 = x + powDy ;
			do Screen.drawHorizontalLine(x1,y1,x2,y1);
			let i = i + 1 ;
			let dy = dy -1 ;
		}
		
		return;
    }
}
