// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

 
 
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	
	// screen = 16,384 to 24,575 <--> in binary: 0100000000000000 to 0101111111111111
	
	Screen(in=in ,load=s ,address=address[0..12] ,out=screen ); 
	
	// ram = 0 to 16383  <--> in binary: 0000000000000000 to 0011111111111111
	
	RAM16K(in=in ,load=r ,address=address[0..13] ,out=ram ); 

	// keyboard = 24576 <--> 0110000000000000
	
	Keyboard(out=kbd );
	
	
	// we now need to send the in to the right address and give output accordingly
	// from addresses above we can conclude that 
	
	DMux(in=load ,sel=address[14] ,a=r ,b=s ); 			// loads only the needed address

	
	// now to sort the output
	
	Mux4Way16(a=ram ,b=ram ,c=screen ,d=kbd ,sel=address[13..14] ,out=out ); 

	

}












