// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	// in = "i xx a cccccc ddd jjj "
	// cccccc - alu instructions 
	// a - determines if  ALU will operate on  A  or on the Memory input
	// i -  the instruction type,  “ 0 ” for an A “ 1 ” for a C-instruction
	// d1 = A , d2 = D , d3  = M
	
	
	//mux a
	
	Mux16(a=instruction, b=aluout, sel=instruction[15], out=ina);

	//A 
	
	Not(in=instruction[15], out=notOp);

	Or(a=notOp, b=instruction[5], out=loada);             			  // if instruction[15] = 0 -> a or d1 = a
	
	ARegister(in=ina, load=loada, out=outa, out[0..14]=addressM);

	
	//mux b
	
	And(a=instruction[15], b=instruction[12], out=mora);     // i bit - 0 for A,  or a bit - 1 for M 
	
	Mux16(a=outa, b=inM, sel=mora, out=MorA);
	
	
	//D
	
	And(a=instruction[15], b=instruction[4], out=loadd);     // i bit - 1 for D and d2 bit - 1 for D
	
	DRegister(in=aluout, load=loadd,out=outd);

	
	
	//alu - cccccc = alu instructions
	
	ALU(x=outd, y=MorA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
	f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zr, ng=ng);

	
	//writeM
	
	And(a=instruction[15], b=instruction[3], out=writeM);  // d3 bit - for M 

	//pc

	//if out=0 then zr=1 else zr=0 
	//if out<0 then ng=1 else ng=0 
	
	
	Not(in=zr, out=notzr);

	Not(in=ng, out=notng);
	
	And(a=instruction[15], b=instruction[0], out=jgt);   // c and j3 = 1
	
	And(a=notng, b=notzr, out=positive);			     // number > 0 and j3 = 1
	
	And(a=positive, b=jgt, out=or1);

	
	And(a=instruction[15], b=instruction[1], out=jeq);   // number = 0 and j2 = 1 
	
	And(a=zr, b=jeq, out=or2);

	
	And(a=instruction[15],b=instruction[2],out=jlt);     // number < 0 and j3 = 1
	
	And(a=ng, b=jlt, out=or3);

	Or(a=or1, b=or2, out=or4);
	
	Or(a=or3, b=or4, out=pcload);

	
	PC(in=outa, load=pcload, inc=true, reset=reset, out[0..14]=pc);


}
